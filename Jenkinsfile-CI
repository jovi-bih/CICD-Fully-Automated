// JENKINS CI PIPELINE/
// Purpose: The Code will be built into executable file (.jar) & pushed to Dockerhub
// NOTE:
//  i. Store Dockerhub, EC2 pem key credentials in Jenkins Server
// ii. Install 'ssh agent' plugin in Jenkins

// JENKINS CI PIPELINE/
// Purpose: The Code will be built into executable file (.jar) & pushed to Dockerhub
// NOTE:
//  i. Store Dockerhub, EC2 pem key credentials in Jenkins Server
// ii. Install 'ssh agent' plugin in Jenkins

pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'maven:3.8.6-openjdk-11'
        DOCKER_ARGS = '-v /var/run/docker.sock:/var/run/docker.sock'
        DOCKER_USERNAME = "jovibih"  // DockerHub username
    }

    stages {
        stage("1. Cleanup") {
            steps {
                deleteDir()  // Clean the workspace directory
            }
        }

        stage('2. Git Checkout') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/jovi-bih/CICD-Fully-Automated.git'
                }
            }
        }

        stage("3. Maven Unit Test") {
            steps {
                script {
                    docker.image(env.DOCKER_IMAGE).inside(env.DOCKER_ARGS) {
                        sh 'mvn test'
                    }
                }
            }
        }

        stage('4. Maven Build') {
            steps {
                script {
                    docker.image(env.DOCKER_IMAGE).inside(env.DOCKER_ARGS) {
                        sh 'mvn clean install'
                    }
                }
            }
        }

        stage("5. Maven Integration Test") {
            steps {
                script {
                    docker.image(env.DOCKER_IMAGE).inside(env.DOCKER_ARGS) {
                        sh 'mvn verify'
                    }
                }
            }
        }

        stage('6. Docker Image Build') {
            steps {
                script {
                    def JOB = env.JOB_NAME.toLowerCase()
                    sh "docker build -t ${JOB}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('7. Docker Image Tag') {
            steps {
                script {
                    def JOB = env.JOB_NAME.toLowerCase()
                    sh "docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}"
                    sh "docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:latest"
                }
            }
        }

        stage('8. Trivy Image Scan') {
            steps {
                script {
                    def JOB = env.JOB_NAME.toLowerCase()
                    sh "trivy image ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER} > scan.txt"
                }
            }
        }

        stage('9. Docker Image Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_creds', passwordVariable: 'my_dockerhub_pass', usernameVariable: 'my_dockerhub_user')]) {
                        sh "docker login -u '${dockerhub_user}' -p '${dockerhub_pass}'"
                        def JOB = env.JOB_NAME.toLowerCase()
                        sh "docker push ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}"
                        sh "docker push ${DOCKER_USERNAME}/${JOB}:latest"
                    }
                }
            }
        }

        stage('10. Docker Image Cleanup') {
            steps {
                script {
                    sh "docker image prune -af"
                }
            }
        }
    }
}
